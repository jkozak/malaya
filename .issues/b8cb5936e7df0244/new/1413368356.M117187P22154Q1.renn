From: John Kozak <jk@thameslighter.net>
Date: Wed, 15 Oct 2014 11:19:16 +0100
Subject: chrjs syntax for transforms
State: new
Message-Id: <b8cb5936e7df0244-0-artemis@renn>

A `transform` is like a `store` but:
 * no `query` statements
 * runs to exhaustion, stops

But needs to be aware of prevalence, so this should be mediated
through the malaya server which can wrap the transform also.

A transform converts an the facts in a store between
one set of rules and another.  If we have stores
`oldStore` and `newStore` then a transform between the two
would be a set of rules which are prepended to a freshly
initted `newStore` and then into which the contents of
`oldStore` are fed, fact by fact.  The resulting fact store
is then loadable by an instance of `newStore`.

Something like:
 var stOld = oldStore {
 // ...
 };
 var stNew = newStore {
 // ...
 };
 var tfm = transform {
 rule (...);
 // ...
 };
 tfm.transform(stOld,stNew);

When NODE_ENV===production, check that current code hash is same as
previous code hash - fail if not, overrideable by a cmdline option or
gui button.

Or, avoiding extra syntax:

A transform is just anotehr store.

Add a method to `store`:
 * `forEach` which is just `facts.forEach`

The transform operation is then:
 stOld.forEach(tfm.add); tfm.forEach(stNew.add);

Could be more stream-y, perhaps?

