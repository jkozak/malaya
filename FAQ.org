* Frequently Asked Questions

** Where does the name come from?

- Multisets And Logic Are Your Application
 - that's a backronym, of course.  The true story will be told one day.

** Is it a database?

It provides persistent storage of application data, so yes.  But see
below.  We've been using the term "fact-store" to make this a bit
clearer.

** Is It relational?

Yes - joins and so on.  But see below.

** Is it SQL?

No, not at all. There is a plan for a tool to translate the malaya
notation to SQL plus the glue needed to run as a server, but that's
not implemented yet.

** Is it a programming language?

Yes.  It consists of a dynaically typed purely functional language
combined with an implementation of a logic programming system and JSON
pattern matching.

** Is it javascript?

It's related: it's basically a purely functional subset of javacript,
minus ~undefined~ plus ~store~ (CHR) and ~rule~ (JSON pattern matching).

This is of course because present versions of Malaya are built on
nodejs and the Malaya language compiles to javascript.  Future
versions may not work this way.

** What JSON formats are used

In principle, anything; but there are conventions imposed by the
runtime system.  Inputs and outputs are marked, and indices are built
assuming these formats, so it's sensible to stil with them.

They are:
- Fact stored in the fact store
  - two-element array of string, object.
    #+begin_example
    ['fact',{truthy:true,contents:{size:97,weight:12,seq:[2,3,4]}}]
    #+end_example
- input or output
 - three-element array of string, object, object.  The first two can
   be used freely; the third is metadata field which denotes the
   source or destination.
   #+begin_example
   ['connect',{port:1234},{src:'tcp'}]
   #+end_example
   #+begin_example
   ['data',{msg:"well, hello"},{src:['tcp',1234]}]
   #+end_example
   #+begin_example
   ['data',{msg:"nice weather"},{dst:['tcp',1234]}]
   #+end_example
   #+begin_example
   ['disconnect',{port:1234},{dst:'tcp'}]
   #+end_example

Machine readable data is always stored as JSON, but a relaxed form is
available in the programming language and as output from the runtime
system; it is essentially [[https://json5.org/][JSON5]].

** Can it be used in connection with a standard database?

Not much.  It would be possible to stream data as a real-time export
to an RDB with an appropriate plugin.

** What would I use it for?
** Why would I want to use it?
** What's CHR?
** Why JSON everywhere?

It's good enough for most things and it's very well known.

** What significant limitations does it have?

In-memory only at the moment, so there's a fact-store size limitation
of 10s of gigabytes (the size of the ~nodejs~ heap).

** Who's writing it?

John Kozak <jk@thameslighter.net> is the principal author.

** What is prevalence?

See [[https://en.wikipedia.org/wiki/System_Prevalence][wikipedia]]

** If prevalence is so great why doesn't everyone use it all the time?
** What's the performance like?

Fine for the application types recommended here.

** Distributed?

Support of a consensus protocol like ePaxos is planned.

** Sharded?
** Is it web-scale?

Not yet.

** Is it HA?

Support of a consensus protocol like ePaxos is planned.

** How auditable is it?

Extremely.

** If the journal history is untamperable what about GDPR?
** The journal history doesn't contain /en clair/ passwords, does it?
** What about schema changes?
** Does it offer replication?

A previous version offered this.  We'd like to get ot back in, perhaps
as part of a more general distributed-sytem model

** Does it have debugging or visualisation tools?

An OpenGL visualiser was available and will be revived at some point.

** Much documentation?

No, but a manual is being written.

** Release schedule?

The 0.7 version has been in private use on a couple of projects for
several years and has proven to be stable.

A 0.9 release is available now for review and comment.  A 1.0 release
is planned for before the end of 2019; future releases within the 1.*
stream will maintain back-compatibility.

** Can the on-disk fact-store be encrypted?
** What plaforms does it run on?

Anywhere ~nodejs~ runs, in principle.  Most deployments are expected
to be on linux, but we'll run CI tests on linux, macOS and windows
against current and LTS versions of ~nodejs~.
** What support arrangements are there?

Support contracts are available, please email.

Also considering a Patreon or similar page if only to gauge the
sincere interest.
