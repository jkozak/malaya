#+TITLE: Malaya
#+AUTHOR: John Kozak

* Introduction
** Basics
** Prerequisites
* Installation
** General instructions
Malaya requires nodejs, and should run on any platform nodejs supports.

It can be installed from =npm=.

* JSON pattern matching
* Constraint Handler Rules
* Malaya fact stores
* Other language features
* Example 1 - turing machine
* Prevalence
* The malaya command
** =init=
** =run=
** =fsck=
** =kill=
** =save=
** =cat=
** =status=
** =query=
* Engines - running the system
* Plugins - talking to the world

** introduction

A malaya system communicates with the outside world via plugins

# example

Plugins are attached to stores and can receive and send facts between
them.  A fact sent by a plugin instance called =garden= might look like this:

#BEGIN_SRC malaya
['bloom',{plant:'crocus'},{src:'garden'}]
#END_SRC

The =src= item identifies the plugin sending the fact.

Malaya code can send to the plugin like this:

#BEGIN_SRC malaya
['re-pot',{plant:'crocus'},{dst:'garden'}]
#END_SRC

Here the =dst= item identifies to which plugin instance the fact is to
be sent.  Effectively, the plugin adds an extra rule at the end of the
store to consume anything with a =dst= field in its third slot
matching its instance name.

** bundled plugins
*** =tcp=
*** =ws=
*** =udp=
*** =process=
*** =http=
*** =file=
*** =unix=
** other plugins
*** =bpf=
*** =dbus=
*** =DNS=
*** =email=
*** =inotify=
*** =LDAP=
*** =matrix=
*** =slack=
*** =ssb=
*** =ssh=
*** =stripe=
*** =syslog=
*** =systemd=
*** Cloud provider APIs, e.g. AWS, GCloud, Azure
*** eBPF

* Example 2
* Example 3
* Updating the schema
* Example 4 - going international with multi-currency support
* Working with the journal
* Example 5 - GDPR
* Example 6 - installing a malaya server under linux
* Future directions

** compile to SQL
** GUI visualisation
** in-browser
** performance

*** better compilation
*** parallelisation
*** join tuning

*** autoindexing

** formal methods

*** model checking

** consensus (ePaxos?)
** p2p apps
** embed in other platforms than node
** (auto-)sharding
** operate on untranslated binary data

Avoid cost of binary->JSON->binary translation by compiling the
rules to work on binary data directly.

* Language reference
