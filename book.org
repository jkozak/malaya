#+TITLE: Malaya
#+AUTHOR: John Kozak
#+OPTIONS: html-style:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-style.css"/>

* Introduction
** Basics

Malaya is a logic-based relational data storage and processing system.

There's a class of applications which are about taking in data from
one or more sources, weaving it together with past data and sending
appropriate data out.  They typically without stopping and are usually
called daemons or services.  Malaya is a micro-kernel for this class
of software.

Such applications include:
 - trading systems
 - messaging systems, client/server and distributed
 - instrumentation and control, e.g. [[https://en.wikipedia.org/wiki/Internet_of_Things][IoT]]
 - CI systems, chat bots
 - system daemons: DNS, DHCP, LDAP &c

Malaya is designed to make this easier.  It is a language and runtime
for the concise and rapid expression, implementation and deployment of
rule-based persistent reactive systems.  Data is everywhere JSON;
[[prevalence][persistent storage]] is based around a hash-chained journal of updates
which is tamper-proof and maintains the system's entire history; it is
thus eminently auditable.  It is also intended to be very amenable to
formal methods.

It consists of:
 - [[JSON pattern matching][JSON pattern matching]]
 - a [[Constraint Handler Rules][logic programming system]] based on [[https://en.wikipedia.org/wiki/Constraint_Handling_Rules][CHR]]
 - a persistence layer based on [[prevalence][prevalence]]
 - a [[CLI][runtime system]]
 - [[plugins][plugins]] to implement
  - timers
  - tcp and udp sockets
  - http, https
  - websockets
  - file I/O
  - slack, matrix, SSB, IRC, &c
  - ssh
  - stripe
  - email

** A foretaste - tiny DNS server

This is a [[https://en.wikipedia.org/wiki/Domain_Name_System#Recursive_and_caching_name_server][caching DNS server]]: it will answer DNS queries from either
its cache or by consulting an upstream server.

#+begin_src malaya
module.exports.main = store {
    ['config',{}];
    ['counters',{dnsId:8888}];

    rule (-['query',   {id,flags:{opcode,...}, q,...},    {src:['udp',...addr]}],
           ['rr',      {q,rds,...}],
          +['response',{id,flags:{opcode,rc:0},q,
                        ans:rds.map(rdObj) },             {dst:['udp',...addr]}] );

    rule ( ['query',   {id,flags:{opcode,...}, q,...},    {src:['udp',...addr]}],
           ['config',  {dnsUpstream,...}],
          +['query',   {id,flags:{opcode,ra:1},q},        {dst:['udp',...dnsUpstream]}] );

    rule (-['response',{id,flags:{opcode,...}, q,ans,...},{src:['udp',...dnsUpstream]}],
           ttd = ans.length>0 ? ans[0].ttl*1000+Date.now() : 60000,
          +['rr',      {q,rds:ans.map(function(an){return an.rd;}),ttd}] );

    rule ( ['rr',{q,...}],      // one RR per name/class/type, poss with multiple rd
          -['rr',{q,...}] );

    rule ( ['tick',{t,...},{src:'timer'}],
          -['rr',{ttd,...}],
           t>=ttd );

    rule (-['tick',{...},{src:'timer'}])

    rule (-['restart',{dnsUpstream,...config},{src:'restart'}],
           dnsU = (typeof dnsUpstream=='string') ? [dnsUpstream,53] : dnsUpstream,
          +['configChange',{dnsUpstream:dnsU,...config}] );

    rule (-['configChange',{...config1}],
          -['config',{...config0}],
          +['config',Object.assign({},config0,config1)] );
}
    .plugin('restart',{dnsUpstream:['8.8.8.8',53]})
    .plugin('timer',{interval:10000})
    .plugin('fifo',{path:'control'})
    .plugin('udp',{
        port:    53,
        encoder: {
            pack:   packDNS,
            unpack: unpackDNS
        }
    });
#+end_src

Code for unpacking and packing JSON into binary format has been
omitted for brevity.  Complete code can be found in the distribution
as [[file:./examples/dns.malaya][examples/dns.malaya]].

If you know DNS, this might make some sense, and you'll spot that
there are some errors and omissions which we'll deal with when we
revisit this at greater length [[DNS example][below]].  It is usable as-is, though.

Run it like this (assuming [[Installation][source distribution]] at =~/malaya=):
#+begin_example
~/malaya$ ./malaya -O udp.port=10053 exec -D examples/dns.malaya
#+end_example

And will answer queries (you'll need [[https://en.wikipedia.org/wiki/Dig_(command)][=dig=]], obviously):
#+begin_example
~$ dig -p10053 @localhost example.com
#+end_example

** Prerequisites
Malaya requires =nodejs=, and should run on any platform =nodejs= supports.

It is developed on linux, and (will be) tested on current versions of =nodejs=
on linux, windows and macOS.

* Installation

** General instructions
Install =nodejs= and =npm=; see [[https://nodejs.org/][the main =nodejs= site]] if in doubt
about this.

To install Malaya with a bundle of plugins, examples and
documentation, clone the source code repository and run =npm install=:
#+begin_example
~$ git clone https://github.com/jkozak/malaya
~$ cd malaya
~/malaya$ npm install
#+end_example

A more minimal installation can be had via =npm=:
#+begin_example
~$ npm install -g malaya
#+end_example
Note that some plugins are distributed as separate npm modules.

* JSON pattern matching
* Malaya fact stores
* Constraint Handler Rules
* Other differences from javascript

Malaya is embedded in a subset of javascript.  This section will
summarise the features dropped from javascript to make Malaya.

(At the time of writing, the Malaya language parser is based on =ES5=,
a fairly old version of javascript; there are no arrow functions, for
example.  This will change.)

~undefined~ and ~void~ are not in the language.

No getters or setters.

Semicolons may not be omitted.

State may not be mutated globally.  Facts in the store are [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze][frozen]] to
ensure this.  This is needed for the prevalence mechanism, as
untracked global state cannot, by definition, be persisted and
restored..

Global variables must be defined via ~const~.

Variables wholly local to a function and not closed over may be
defined via ~let~ and mutated. (The closure restriction is to stop the
backdoor creation of global mutable state)

~class~ and ~new~ are not supported at all.  ~function~ is now
equivalent to ~=>~ which is preferred.

~var~ is not supported at all.

~require~ is fully supported and there should probably be a
module white-listing mechanism.

Async additions such as ~async~ and ~await~ are not supported at all.

* Example 1 - hello world
#+include: "examples/world.malaya" src malaya

Run it like this:
#+begin_example
~/malaya$ ./malaya exec -D examples/world.malaya
#+end_example

If you have =curl= available you can now do:
#+begin_example
~/malaya$ curl http://localhost:8280/
#+end_example

* Prevalence
<<prevalence>>
* The =malaya= command
<<CLI>> The Malaya CLI is a single command which has a number of
subcommands which perform various tasks (like [[https://git-scm.com/][git]]).

The command itself is (imaginatively) called =malaya= and will be put
on the system path by =npm install -g malaya= or can be found in the
top level directory of a [[Installation][source install]].

** global arguments

Global arguments deal with things that concern most or all
subcommands, like the location of the prevalence directory, or the
verbosity level.

- =-l=, =--long-lines= :: don't shorten JSON output
- =-p=, =--prevalence-directory= /dir/ :: specify  the prevalence directory
     defaults to =./.prevalence=
- =-q=, =--quiet= :: be more quiet
- =-v=, =--verbose= :: be more verbose
- =-P=, =--plugin= :: load a plugin and create an instance,
     cannot be used to create multiple instances of a single plugin.
- =-O=, =--override= /plugin.option=JSON/ ::
     set /plugin/'s /option/ value to /JSON/, no unquoted spaces allowed.

The =-P= and =-O= commands appear here (global arguments) because they
can add extra sucommands to the =malaya= command.  Because of this,
they must occur first in the argument list.

** subcomands
*** =cat=
*** =exec=
*** =fsck=
*** =init=
*** =kill=
*** =run=
*** =save=
*** =status=
*** =query=
* Engines - running the system
* Plugins - talking to the world
<<plugins>>
** Introduction

A malaya system communicates with the outside world via plugins

# example

Plugins are attached to stores and can receive and send facts between
them.  A fact sent by a plugin instance called =garden= might look like this:

#+begin_src malaya
['bloom',{plant:'crocus'},{src:'garden'}]
#+end_src

The =src= item identifies the plugin sending the fact.

Malaya code can send to the plugin like this:

#+begin_src malaya
['re-pot',{plant:'crocus'},{dst:'garden'}]
#+end_src

Here the =dst= item identifies to which plugin instance the fact is to
be sent.  Effectively, the plugin adds an extra rule at the end of the
store to consume anything with a =dst= field in its third slot
matching its instance name.

** bundled plugins
*** =tcp=
*** =ws=
*** =udp=
*** =process=
*** =http=
*** =file=
*** =unix=
** other plugins
*** =bpf=
*** =dbus=
*** =email=
*** =inotify=
*** =LDAP=
*** =matrix=
*** =slack=
*** =ssb=
*** =ssh=
*** =stripe=
*** =syslog=
*** =systemd=
*** Cloud provider APIs, e.g. AWS, GCloud, Azure
*** eBPF

* Example 2 DNS
<<DNS example>>
* Example 3 turing machine
* Updating the schema
* Example 4 - going international with multi-currency support
* Working with the journal
* Example 5 - GDPR
* Example 6 - installing a Malaya server under linux
* Embedding Malaya
* Future directions

** compile to SQL
** GUI visualisation
** in-browser
** performance

*** better compilation
*** parallelisation
*** join tuning

*** autoindexing

** formal methods

*** model checking

** consensus (ePaxos?)
** p2p apps
** embed in other platforms than node
** (auto-)sharding
** operate on untranslated binary data

Avoid cost of binary->JSON->binary translation by compiling the
rules to work on binary data directly.

* Language reference
#+include: "./FAQ.org" :minlevel 1
