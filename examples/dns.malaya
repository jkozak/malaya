const assert = require('assert').strict;
const  types = require('../types.js');
const   util = require('../util.js');

function unpackDNSname(buf,off) {
    const ans = [];
    while (true) {
        const n = buf.readUInt8(off);
        if ((n&0xC0)===192) { // compression
            const off0 = buf.readUInt16BE(off)&0x3FFF;
            const rest = unpackDNSname(buf,off0);
            return [ans.concat(rest[0]),off+2];
        } else if (n===0)
            return [ans,off+1];
        ans.push(buf.slice(off+1,off+n+1).toString('ascii'));
        off += n+1;
    }
}

function packDNSname(buf,v,off) {
    v.forEach(function(n){
        buf.writeUInt8(n.length,off++);
        for (let i=0;i<n.length;i++)
            buf.writeUInt8(n.charCodeAt(i),off++);
    });
    buf.writeUInt8(0,off++);
    return off;
}

function packIPv4(buf,ip,off) {
    const ns = ip.split('.').map(x=>parseInt(x));
    assert.equal(ns.length,4);
    ns.forEach(i=>{
        assert(i>=0 && i<256);
        buf.writeUInt8(i,off++);
    });
    return off;
}

function unpackIPv4(buf,off) {
    const quad = [];
    for (let i=0;i<4;i++)
        quad.push(buf.readUInt8(off+i).toString());
    return [quad.join('.'),off+4];
}

const rr2n = {
    a:       1,
    ptr:    12,
    cname:   5,
    txt:    16,
    opt:    41,
    aaaa:   28,
    soa:     6,
    srv:    33,
    sshfp:  44,
    uri:   256
};
const n2rr = function(){const ans = {};
                        Object.entries(rr2n).forEach(function(k,v){ans[v]=k;});
                        return ans;}();

function packDNSrr(buf,rr,q,off) {
    off = packDNSname(buf,  rr.name || q.name,off);
    off = buf.writeUInt16BE(rr.type || q.type,off);
    off = buf.writeUInt16BE(rr.cls  || q.cls, off);
    off = buf.writeUInt32BE(rr.ttl  || 0,     off);
    switch (rr.type || q.type) {
    case 1:                     // A
        off = buf.writeUInt16BE(4,    off);
        off = packIPv4(buf,rr.rd,off);
        //off = buf.writeUInt32BE(rr.rd,off);
        break;
    case 12:                    // PTR
    case 5: {                   // CNAME
        const off1 = packDNSname(buf,rr.rd,off+2);
        off = buf.writeUInt16BE(off1-off-2,off);
        off = off1;
        break;
    }
    case 16:                    // TXT
        off = buf.writeUInt16BE(rr.rd.length,off);
        off = buf.write(        rr.rd,       off);
        break;
    case 41:                    // OPT
    case 28:                    // AAAA
    case 15:                    // MX
    case 6:                     // SOA
    case 33:                    // SRV
    case 44:                    // SSHFP
    case 256:                   // URI
        off  = buf.writeUInt16BE(rr.rd.length/2,off);
        off += Buffer.from(rr.rd,'hex').copy(buf,off);
        break;
    default:
        console.log("bad type: %j",rr.type);
        break;
    }
    return off;
}

function unpackDNSrr(buf,off) {
    let    x;
    const rr = {};
    x = unpackDNSname(buf,off);  rr.name=x[0]; off=x[1];
    rr.type = buf.readUInt16BE(off);           off+=2;
    rr.cls  = buf.readUInt16BE(off);           off+=2;
    rr.ttl  = buf.readUInt32BE(off);           off+=4;
    const len = buf.readUInt16BE(off);         off+=2;
    switch (rr.type) {
    case 1:                     // A
        rr.rd = unpackIPv4(buf,off)[0];
        break;
    case 12:                    // PTR
    case 5:                     // CNAME
        rr.rd = unpackDNSname(buf,off)[0];
        break;
    case 16: {                  // TXT
        const len = buf.readUInt16BE(off);
        rr.rd = buf.read(off+2,len).toString('utf8');
        break;
    }
    case 41:                    // OPT
    case 28:                    // AAAA
    case 15:                    // MX
    case 6:                     // SOA
    case 33:                    // SRV
    case 44:                    // SSHFP
    case 256:                   // URI
        rr.rd = buf.slice(off,len).toString('hex');
        break;
    default:
        console.log("bad type: %j",rr.type);
        break;

    }
    off += len;

    return [rr,off];
}

function unpackDNSrrList(buf,n,off) {
    const ans = [];
    for (let i=0;i<n;i++) {
        const x = unpackDNSrr(buf,off);
        ans.push(x[0]);
        off = x[1];
    }
    return [ans,off];
}

function packDNS(js2) {
    const  js = js2[1];
    let   off = 0;
    const buf = Buffer.alloc(1024);
    const ans = js.ans || [];
    const nss = js.nns || [];
    const ars = js.ars || [];
    const  qr = ['query','response'].indexOf(js2[0]);
    if (qr===null)
        throw new Error("unrecognised dns packet type: %j",js[0]);
    if (js.flags.qr===undefined)
        js.flags.qr = qr;
    if (qr!==js.flags.qr)
        throw new Error("unrecognised dns packet type: %j");
    off = buf.writeUInt16BE(js.id,off);
    off = buf.writeUInt16BE(((js.flags.qr     || 0) << 15) +
                            ((js.flags.opcode || 0) << 14) +
                            ((js.flags.aa     || 0) << 11) +
                            ((js.flags.tc     || 0) << 10) +
                            ((js.flags.rd     || 0) << 9)  +
                            ((js.flags.ra     || 0) << 8)  +
                            ((js.flags.rc     || 0)),
                            off);
    off = buf.writeUInt16BE(js.qdcount || 1, off);
    off = buf.writeUInt16BE(ans.length,      off);
    off = buf.writeUInt16BE(nss.length,      off);
    off = buf.writeUInt16BE(ars.length,      off);
    off = packDNSname(buf,js.q.name,         off);
    off = buf.writeUInt16BE(js.q.type || 0,  off);
    off = buf.writeUInt16BE(js.q.cls  || 0,  off);
    [ans,nss,ars].forEach(xs=>{
        xs.forEach(x=>{
            off = packDNSrr(buf,x,js.q,off);
        });
    });
    return buf.slice(0,off);
}

function unpackDNS(buf) {
    const   flags = buf.readUInt16BE(2);
    const qdcount = buf.readUInt16BE(4);
    const ancount = buf.readUInt16BE(6);
    const nscount = buf.readUInt16BE(8);
    const arcount = buf.readUInt16BE(10);
    const     pdn = unpackDNSname(buf,12);
    const     xan = unpackDNSrrList(buf,ancount,pdn[1]+4); // +4 for type and cls
    const     xns = unpackDNSrrList(buf,nscount,xan[1]);
    const     xar = unpackDNSrrList(buf,arcount,xns[1]);
    if (qdcount!==1)
        throw new Error("invalid qdcount: "+qdcount);
    const   dnsqr = {
        id:      buf.readUInt16BE(0),
        flags:   {
            qr:     (flags >> 15) & 0x01,
            opcode: (flags >> 14) & 0x0F,
            aa:     (flags >> 11) & 0x01,   // not for query
            tc:     (flags >> 10) & 0x01,
            rd:     (flags >>  9) & 0x01,
            ra:     (flags >>  8) & 0x01,   // not for query
            rc:     (flags      ) & 0x0F    // not for query
        },
        q:       {
            name: pdn[0],
            type: buf.readUInt16BE(pdn[1]),
            cls:  buf.readUInt16BE(pdn[1]+2)
        },
        ans:     xan[0],
        nss:     xns[0],
        ars:     xar[0]
    }
    return [dnsqr.flags.qr ? 'response' : 'query',dnsqr];
}

const typeRR = new types.Record({type:types.UInt8,data:types.String})
unpackDNS.types = packDNS.types = [
    new types.Tuple([
        new types.Or(new types.Const('query'),new types.Const('response')),
        new types.Record({
            flags: new types.Record({
                qr:     new types.Int(false,1), // +++ check widths +++
                opcode: new types.Int(false,4),
                aa:     new types.Int(false,1),
                tc:     new types.Int(false,1),
                rd:     new types.Int(false,1),
                ra:     new types.Int(false,1),
                rc:     new types.Int(false,4)
            }),
            ans: new types.List(typeRR),
            nss: new types.List(typeRR),
            ars: new types.List(typeRR),
            q: new types.Record({
                name:     types.String,
                type: new types.Int(false,16),
                cls:  new types.Int(false,16)
            }),
        }),
    ])
];

function rdObj(rd) {
    return {rd:rd};
}

module.exports.main = store {
    ['config',{}];
    ['counters',{dnsId:8888}];

    rule (-['query',   {id,flags:{opcode,...}, q,...},    {src:['udp',...addr]}],
           ['rr',      {q,rds,...}],
          +['response',{id,flags:{opcode,rc:0},q,
                        ans:rds.map(rdObj) },             {dst:['udp',...addr]}] );

    rule ( ['query',   {id,flags:{opcode,...}, q,...},    {src:['udp',...addr]}],
           ['config',  {dnsUpstream,...}],
          +['query',   {id,flags:{opcode,ra:1},q},        {dst:['udp',...dnsUpstream]}] );

    rule (-['response',{id,flags:{opcode,...}, q,ans,...},{src:['udp',...dnsUpstream]}],
           ttd = ans.length>0 ? ans[0].ttl*1000+Date.now() : 60000,
          +['rr',      {q,rds:ans.map(function(an){return an.rd;}),ttd}] );

    rule ( ['rr',{q,...}],      // one RR per name/class/type, poss with multiple rd
          -['rr',{q,...}] );

    rule ( ['tick',{t,...},{src:'timer'}],
          -['rr',{ttd,...}],
           t>=ttd );

    rule (-['tick',{...},{src:'timer'}]);

    rule (-['restart',{dnsUpstream,...config},{src:'restart'}],
           dnsU = (typeof dnsUpstream=='string') ? [dnsUpstream,53] : dnsUpstream,
          +['configChange',{dnsUpstream:dnsU,...config}] );

    rule (-['configChange',{...config1}],
          -['config',{...config0}],
          +['config',Object.assign({},config0,config1)] );
}
    .plugin('restart',{dnsUpstream:['8.8.8.8',53]})
    .plugin('timer',{interval:10000})
    .plugin('fifo',{path:'control'})
    .plugin('udp',{
        port:    53,
        encoder: {
            pack:   packDNS,
            unpack: unpackDNS
        }
    });

if (util.env==='test')
    module.exports._private = {
        packDNSname:   packDNSname,
        unpackDNSname: unpackDNSname,
        packDNS:       packDNS,
        unpackDNS:     unpackDNS,
        packIPv4:      packIPv4,
        unpackIPv4:    unpackIPv4,
        packDNSrr:     packDNSrr,
        unpackDNSrr:   unpackDNSrr
    };
