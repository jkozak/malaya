var    _ = require('underscore');
var   fs = require('fs');
var exec = require('child_process').exec;

var dateToYYYYMMDD = function(md) {
    var d = new Date(md).toISOString();
    return d.substr(0,4)+d.substr(5,2)+d.substr(8,2);
}

var IDB = store {
    // !!! hacking initial data import: tweak my password !!!
    rule (-['Permissions',{ApplicationName:"John Kozak",Password,...rs}],
	  Password!=="JK",
	  +['Permissions',{ApplicationName:"John Kozak",Password:"JK",...rs}]);
    
    // logon processing
    rule (-['logon',      {user,password}],
	  -['Permissions',{ApplicationName:user,Password,LoggedOn:0,...rs}],
	  Password.trimRight()===password,
	  +['Permissions',{ApplicationName:user,Password,LoggedOn:1, ...rs}] );
    rule (-['logon',      {user,password}],
	  ['Permissions',{ApplicationName:user,Password,LoggedOn:1}],
	  Password.trimRight()===password,
	  +['msg',user,"already logged on"] );
    rule (-['logon',      {user,password}],
	  ['Permissions',{ApplicationName:user}],
	  +['msg',user,"bad password"] );
    rule (-['logon',      {user,password}],
	  +['msg',user,"user unknown"] );

    query users(;
		['Permissions',{ApplicationID,ApplicationName}];
		a=[])  a.concat([[ApplicationID,ApplicationName]]);
    query user(appId;
	       ['Permissions',{ApplicationID:appId,...rs}];
	       a=[])  a.concat([rs]);

    query staticdata(;
		     ['Permissions',{ApplicationID:appId,TeamID:teamId,CompanyID:companyId}],
		     ['Team',{TeamID:teamId,TeamName:team}];
		     a=[]) a.concat([{app:appId,team:teamId,Name:companyId}]);

    query instruments(appId;
		      ['Instrument',inst];
		      a=[]) a.concat([{
			  ID:               inst.InstID,
			  Name:             inst.InstName,
			  SubClass:         inst.InstSubClassID,
			  Maturity:         dateToYYYYMMDD(inst.MaturityDate),
			  'new':            0,
			  Visible:          inst.VisibleFlag,
			  Description:      inst.InstDesc,
			  AuctionInstTitle: inst.AuctionInstTitle,
			  PriceTick:        inst.PriceTick
		      }]);

    query subclasses(;
		     ['InstrumentClass',sc];
		     a=[]) a.concat([{
			 ID:                sc.InstSubClassID,
			 Name:              sc.InstSubClassName,
			 AssociatedTitleID: sc.AssociatedTitle,
			 Title:             sc.Title,
			 DefltVol:          sc.DefaultVolume,
			 PriceTick:         sc.PriceTick,
			 ShowSign:          sc.Display_ShowPlusMinus,
			 xBidMinus1:        sc.Match_xBidMinus1,
			 AuctionVolumes:    sc.AuctionVolumes
		     }]);

    query cookie(appId,id;
		 ['Cookies',{ApplicationID:appId,CookieID:id,Cookie}];
		 a=[]) a.concat(Cookie);
};

if (false) {
    var json = JSON.parse(fs.readFileSync('init_db.json'));

    for (var i in json) {
	IDB.add(json[i]);
    }
} else {
    var child = exec("python import_init_db.py ~/giltking/thrift/tests/init_db.py",{
	maxBuffer: 10*1024*1024
    }, function(err,stdout,stderr) {
	var json = JSON.parse(stdout);
	for (var i in json)
	    IDB.add(json[i]);
    });
    child.on('exit',function(code,signal) {
	if (code!==0)
	    console.log("failed: %j",code);
    });
    child.on('close',function() {
	var resp = IDB.add(['logon',{user:"John Kozak",password:"JK"}])
	console.log("*** logon resp: %j",resp);
	console.log("*** logon resp.adds: %j",_.map(resp.adds,function(t){return IDB.get(t);}));
	console.log("*** JK: %j",IDB.queries.user(51));
	//console.log("users: %j",IDB.queries.users());
	// console.log("staticdata(): %j",IDB.queries.staticdata());
	// console.log("instruments(): %j",IDB.queries.instruments());
	// console.log("subclasses(): %j",IDB.queries.subclasses());
	// console.log("cookie(51,0): %j",IDB.queries.cookie(51,0));
    });
}
// +++ get via ODBC +++
