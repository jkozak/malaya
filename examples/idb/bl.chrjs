var     _ = require('underscore');
var    fs = require('fs');
var faker = require('faker');

var dateToYYYYMMDD = function(md) {
    var d = new Date(md).toISOString();
    return d.substr(0,4)+d.substr(5,2)+d.substr(8,2);
}

// need to handle these messages:
//    AuctionTemplateBlock
//    AuctionTemplate
//    AuctionDelAll
//    PrepareAuction
//    StartPreparedAuction
//    AuctionSecondChance
//    AuctionMatch
//  X start
//  X cookie
//  X store-cookie
//  X logon
//    price
//    trade
//  X market-status
//    InstHightlight
//    BigFigBlock
//    EndBigFigBlock
//    AuctionPriceBlock

var IDB = store {
    // filter the db data on its way in to remove the more egregious nasties
    // +++ this should be a transform +++
    rule (-['Permissions',{Password,...rs}],                              // remove trailing pwd spaces
	  Password && Password.charAt(Password.length-1)===' ',
	  +['Permissions',{Password:Password.trimRight(),...rs}]);
    rule (-['Permissions',{ApplicationName:"John Kozak",Password,...rs}], // tweak my pwd
	  Password!=="JK",
	  +['Permissions',{ApplicationName:"John Kozak",Password:"JK",...rs}]);
    rule (-['Permissions',{ApplicationName,Password,...rs}],         // anonymise users and passwords
	  ApplicationName!=="John Kozak" && !rs.hasOwnProperty('anon'),
	  aname = faker.name.findName(),
	  apwd  = faker.internet.password(),
	  +['Permissions',{ApplicationName:aname,Password:apwd,anon:null,...rs}]);

    // the market itself
    rule (['MarketState',{MarketID}],   -['MarketState',{MarketID}]);
    rule (['market-status',{ID,status}],+['MarketState',{MarketID:ID,Status:status}]);
    
    // logon processing
    rule (-['logon',      {user,pw},{port}],
	  -['Permissions',{ApplicationName:user,Password:pw,LoggedOn:0,...rs}],
	  +['Permissions',{ApplicationName:user,Password,LoggedOn:1,port, ...rs}] );
    rule (-['logon',      {user,pw}],
	  ['Permissions',{ApplicationName:user,Password:pw,LoggedOn:1}],
	  +['msg',null,"already logged on"] );
    rule (-['logon',      {user}],
	  ['Permissions',{ApplicationName:user}],
	  +['msg',null,"bad password"] );
    rule (-['logon'],
	  +['msg',null,"user unknown"] );

    // cookies
    rule (-['store-cookie',{id,cookie},{port}],
	  ['Permissions',{port,ApplicationID}],
	  -['Cookies',{ApplicationID,CookieID:id,Cookie:cookie}],
	  +['Cookies',{ApplicationID,CookieID:id,Cookie:cookie}] );

    // background
    rule (['tick'],-['msg']);
    // +++ 
    rule(-['tick']);

    query users(;
		['Permissions',{ApplicationID,ApplicationName,Password}];
		a=[])  a.concat([[ApplicationID,ApplicationName,Password]]);
    query user(appId;
	       ['Permissions',{ApplicationID:appId,...rs}];
	       a=[])  a.concat([rs]);

    query staticdata(;
		     ['Permissions',{ApplicationID:appId,TeamID:teamId,CompanyID:companyId}],
		     ['Team',{TeamID:teamId,TeamName:team}];
		     a=[]) a.concat([{app:appId,team:teamId,Name:companyId}]);

    query instruments(appId;
		      ['Instrument',inst];
		      a=[]) a.concat([{
			  ID:               inst.InstID,
			  Name:             inst.InstName,
			  SubClass:         inst.InstSubClassID,
			  Maturity:         dateToYYYYMMDD(inst.MaturityDate),
			  'new':            0,
			  Visible:          inst.VisibleFlag,
			  Description:      inst.InstDesc,
			  AuctionInstTitle: inst.AuctionInstTitle,
			  PriceTick:        inst.PriceTick
		      }]);

    query feCookies(;
		    ['FEConfig',{TabID,CookieData}];
		    a=[]) a.concat(CookieData);

    query subclasses(;
		     ['InstrumentClass',sc];
		     a=[]) a.concat([{
			 ID:                sc.InstSubClassID,
			 Name:              sc.InstSubClassName,
			 AssociatedTitleID: sc.AssociatedTitle,
			 Title:             sc.Title,
			 DefltVol:          sc.DefaultVolume,
			 PriceTick:         sc.PriceTick,
			 ShowSign:          sc.Display_ShowPlusMinus,
			 xBidMinus1:        sc.Match_xBidMinus1,
			 AuctionVolumes:    sc.AuctionVolumes
		     }]);

    query cookie(appId,id;
		 ['Cookies',{ApplicationID:appId,CookieID:id,Cookie}];
		 a=[]) a.concat(Cookie);
};

module.exports = IDB;

