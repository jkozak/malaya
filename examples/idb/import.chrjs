const      _ = require('underscore');
const    x2j = require('./x2j');
const  faker = require('faker');

const transform = store {
    // filter the db data on its way in to remove the more egregious nasties
    rule (-['Permissions',{Password,AppRole,...rs},{keep:false}],                      // trailing pwd spaces;roles
          Password && Password.charAt(Password.length-1)===' ',
          +['Permissions',{Password:Password.trimRight(),AppRole,roles:importRoles(AppRole),...rs},{keep:true}]);
    rule (-['Permissions',{ApplicationName:"John Kozak",Password,...rs},{keep:false}], // tweak my pwd
          Password!=="JK",
          +['Permissions',{ApplicationName:"John Kozak",Password:"JK",...rs},{keep:true}]);
    rule (-['Permissions',{ApplicationName,Password,...rs},{keep:false}],              // anonymise users and pwds
          ApplicationName!=="John Kozak" && !rs.hasOwnProperty('anon'),
          aname = faker.name.findName(),
          apwd  = faker.internet.password(),
          +['Permissions',{ApplicationName:aname,Password:apwd,anon:null,...rs},{keep:true}]);
    rule (-['MarketManager',{auctionId,...rs},{keep:false}],                           // default start auctionId
          _.isUndefined(auctionId),
          +['MarketManager',{auctionId:10000,...rs},{keep:true}] );
    rule (-['FEConfig',{CookieData,data,...ps},{keep:false}],                          // remove embedded XML
          _.isUndefined(data),
          +['FEConfig',{data:x2j.parse(CookieData),...ps},{keep:true}] );
    rule (-[tag,fields,{keep:false}],                                                  // copy everything else 
          +[tag,fields,{keep:true}] );
}
