#!/usr/bin/env node
// -*- mode:javascript -*-
"use strict";

var       _ = require('underscore');
var  events = require('events');
var  assert = require('assert');

var cmdline = require('../../cmdline.js');
var    util = require('../../util.js');
var  Engine = require('../../engine.js').Engine;

var     fe3 = require('./fe3.js');
var     x2j = require('./x2j.js');

function FE3Connection(sock,server) {
    var mc          = this;
    var ee          = new events.EventEmitter();
    var recved      = new Buffer(0);
    var NUL         = new Buffer('\x00');
    var appId       = null;

    var write = function(jsx) {
        var xml = x2j.build(jsx);
        var hdr = new Buffer(fe3.consts.FE3_HDR_LENGTH);
        hdr.writeInt32LE(fe3.consts.AP_XML2,      0); // type
        hdr.writeInt32LE(0,                       4); // drain
        hdr.writeInt32LE(0,                       8); // ticks
        hdr.writeInt32LE(xml.length+1,           12); // cbData (inc trailing NUL)
        hdr.writeInt32LE(0,                      16); // seqNo
        hdr.writeInt32LE(0,                      20); // dummy
        sock.write(hdr);
        sock.write(xml,'ascii');
        sock.write(NUL);
    };

    var command = function(cmd) {
        return server.command(cmd,mc,function(err,res) {
        });
    };

    var handleJsx = function(jsx) {
        assert.equal(Object.keys(jsx).length,1);
        var tag = Object.keys(jsx)[0];
        command([tag,jsx[tag]]);
    };

    this.port  = util.format("fe3://%s:%d/",sock.remoteAddress,sock.remotePort);
    this.on    = function(what,handler) {ee.on(what,handler);};
    this.close = function() {
        sock.end();
    };
    this.end = function() {
        sock.end();
    };
    this.write = function(js) {
        write(js);
    };
    sock.on('data',function(data) {
        recved = Buffer.concat([recved,data]);
        while (recved.length>=fe3.consts.FE3_HDR_LENGTH) {
            var   type = recved.readInt32LE( 0);
            var cbData = recved.readInt32LE(12);
            if (recved.length>=fe3.consts.FE3_HDR_LENGTH+cbData) {
                switch (type) {
                case fe3.consts.AP_XML2A: {
                    var xml = recved.toString('ascii',fe3.consts.FE3_HDR_LENGTH+4,fe3.consts.FE3_HDR_LENGTH+cbData-1);
                    handleJsx(x2j.parse(xml));
                    break;
                }
                case fe3.consts.AP_HEARTBEAT:
                    break;
                default:
                    util.error("unknown FE3 pkt type: "+type);
                    // +++ maybe drop connection? +++
                }
                recved = recved.slice(fe3.consts.FE3_HDR_LENGTH+cbData); // processed, forget
            }
        }
    });
    sock.on('error',function(err) {
        util.error("socket error: "+err);
        sock.end();         // ???
    });
    sock.on('close',function() {
        try {
            command(['logoff',{appId:appId}]);
        } catch (e) {
            console.log("couldn't logoff: "+e); // this happens if server is shutdown
        }
        ee.emit('close');
    });
    
    if (util.env==='test') 
        this._private = {
            handleJsx: handleJsx
        };
    return this;
}

function IDBEngine(options) {
    Engine.call(this,options);
    return this;
}

util.inherits(IDBEngine,Engine);

IDBEngine.prototype.masterListen = function(done) {
    var engine = this;
    var  done2 = _.after(2,done);
    Engine.prototype.masterListen.call(engine,done2);
    if (engine.options.ports.fe3) {
        var mlyServer = {
            addConnection: function(conn) {
                conn.on('close',function() {
                    engine.forgetConnection(conn.port);
                });
                engine.conns[conn.port] = [null,{
                    write:function(jsx,encoding,cb) {
                        if (_.keys(jsx).length!==1)
                            engine.emit('error',util.format("bad jsx: %j",jsx));
                        conn.write(jsx);
                        if (cb) cb(null);
                    },
                    end:function() {
                        util.debug("*** end1: %j",conn.port);
                    } }];
            },
            command: function(js,conn,cb) {
                engine.update([js[0],js[1],{port:conn.port}],cb);
            } };
        var fe3Server = fe3.createServer({FE3Connection:FE3Connection,
                                          malaya:       mlyServer});
        fe3Server.on('listening',function() {
            engine.emit('listen','fe3',engine.options.ports.fe3);
        });
        engine.on('connectionClose',function(port) {
            engine.update(['logoff',{},{port:port}]);
        });
        fe3Server.listen(engine.options.ports.fe3);
    }
    done2();
};

cmdline.run({createEngine:function(opts) {
    opts.tag       = 'idb';
    opts.ports.fe3 = 5110;
    var engine = new IDBEngine(opts);
    return engine;
}});
