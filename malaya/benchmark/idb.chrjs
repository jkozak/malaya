"use strict";

var assert = require('assert');
var   path = require('path');
var     fs = require('fs');

var dateToYYYYMMDD = function(md) {
    var d = new Date(md).toISOString();
    return d.substr(0,4)+d.substr(5,2)+d.substr(8,2);
}

store IDB {
    // logon processing
    rule (-['logon',      {user,password}],
          -['Permissions',{ApplicationName:user,Password:password,LoggedOn:0,...rs}],
          +['Permissions',{ApplicationName:user,Password:password,LoggedOn:1,...rs}] );
    rule (-['logon',      {user,password}],
          ['Permissions',{ApplicationName:user,Password:password,LoggedOn:1}],
          +['msg',user,"already logged on"] );
    rule (-['logon',      {user}],
          ['Permissions',{ApplicationName:user}],
          +['msg',user,"bad password"] );
    rule (-['logon',      {user}],
          +['msg',user,"user unknown"] );

    rule (-['logoff',{id}],
          -['Permissions',{ApplicationID:id,LoggedOn:1,...rs}],
          +['Permissions',{ApplicationID:id,LoggedOn:0,...rs}] );
    rule (-['logoff',{id}]);

    rule (-['unmsg'],
          -['msg']);

    // queries
    query users(;
                ['Permissions',{ApplicationID,ApplicationName,Password}];
                a=[])  a.concat([[ApplicationID,ApplicationName,Password]]);
    query user(appId;
               ['Permissions',{ApplicationID:appId,...rs}];
               a=[])  a.concat([rs]);

    query staticdata(;
                     ['Permissions',{ApplicationID:appId,TeamID:teamId,CompanyID:companyId}];
                     a=[]) a.concat([{app:appId,team:teamId,Name:companyId}]);

    query instruments(appId;
                      ['Instrument',inst];
                      a=[]) a.concat([{
                          ID:               inst.InstID,
                          Name:             inst.InstName,
                          SubClass:         inst.InstSubClassID,
                          Maturity:         dateToYYYYMMDD(inst.MaturityDate),
                          'new':            0,
                          Visible:          inst.VisibleFlag,
                          Description:      inst.InstDesc,
                          AuctionInstTitle: inst.AuctionInstTitle,
                          PriceTick:        inst.PriceTick
                      }]);

    query subclasses(;
                     ['InstrumentClass',sc];
                     a=[]) a.concat([{
                         ID:                sc.InstSubClassID,
                         Name:              sc.InstSubClassName,
                         AssociatedTitleID: sc.AssociatedTitle,
                         Title:             sc.Title,
                         DefltVol:          sc.DefaultVolume,
                         PriceTick:         sc.PriceTick,
                         ShowSign:          sc.Display_ShowPlusMinus,
                         xBidMinus1:        sc.Match_xBidMinus1,
                         AuctionVolumes:    sc.AuctionVolumes
                     }]);

    query cookie(appId,id;
                 ['Cookies',{ApplicationID:appId,CookieID:id,Cookie}];
                 a=[]) a.concat(Cookie);
}

var json = JSON.parse(fs.readFileSync(path.join(__dirname,'../../examples/idb/data/idb.json')));
for (var i in json) 
    IDB.add(json[i]);

suite('toy idb with real data',function() {
    bench("failed logon (no such user) and msg tidy",function() {
        var res = IDB.add(['logon',{user:"Samson Agonistes",password:"ouch"}]);
        assert.equal(IDB.get(res.adds[0])[0],'msg');
        IDB.add(['unmsg']);
    });
    bench("logon (bad password) and msg tidy",function() {
        var res = IDB.add(['logon',{user:"John Kozak",password:"the wrong one"}]);
        assert.equal(IDB.get(res.adds[0])[0],'msg');
        IDB.add(['unmsg']);
    });
    bench("logon and logoff",function() {
        var res = IDB.add(['logon', {user:"John Kozak",password:"JK"}]);
        assert.equal(IDB.get(res.adds[0])[0],'Permissions')
        res = IDB.add(['logoff',{id:51}]);
        assert.equal(IDB.get(res.adds[0])[0],'Permissions')
    });
    bench("query instruments",function() {
        IDB.queries.instruments(51);
    });
    bench("query staticdata",function() {
        IDB.queries.staticdata();
    });
    // bench("dateToYYYYMMDD",function() {
    //   // Let's see if this function is taking most of the time in
    //   // "query instruments" above.  It is.
    //   dateToYYYYMMDD("Mon Jun  1 00:00:00 2037");
    // });
});
